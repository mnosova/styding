extends ../layout/template

block variables
  - var pageClass = 'page__learnjs'
  - var PageTitle = "Learn JavaScript"
  - var PageID = 'learnjs'


block content
  p: b Основы JavaScript.Привет, мир!
  p Сделайте страницу, которая выводит «Я – JavaScript!».
  p: button(onclick='helloWorld()') запуск
  p: b Основы JavaScript.Переменные
  p Объявите две переменные: admin и name.
    | Запишите в name строку "Василий".
    | Скопируйте значение из name в admin.
    | Выведите admin (должно вывести «Василий»).
  p: button(onclick='showAdmin()') запуск
  p: b Основы JavaScript.Взаимодействие с пользователем: alert, prompt, confirm
  p Создайте страницу, которая спрашивает имя и выводит его.
  p: button(onclick='askName()') запуск
  p: b Основы JavaScript.Условные операторы: if, '?'
  p 1.Используя конструкцию if..else, напишите код, который будет спрашивать: «Каково «официальное» название JavaScript?».
    | Если посетитель вводит «ECMAScript», то выводить «Верно!», если что-то другое – выводить «Не знаете? «ECMAScript»!».
  p: button(onclick='getKnowladge()') запуск
  p 2.Используя конструкцию if..else, напишите код, который получает значение prompt, а затем выводит alert:
    | 1, если значение больше нуля,
    | -1, если значение меньше нуля,
    | 0, если значение равно нулю.
  p: button(onclick='resultToNum()') запуск
  p 3. Напишите код, который будет спрашивать логин (prompt).
    | Если посетитель вводит «Админ», то спрашивать пароль, если нажал отмена (escape) – выводить «Вход отменён», если вводит что-то другое – «Я вас не знаю».
    | Пароль проверять так. Если введён пароль «Чёрный Властелин», то выводить «Добро пожаловать!», иначе – «Пароль неверен», при отмене – «Вход отменён».
  p: button(onclick='logIn()') запуск

  p 5.Перепишите if..else с использованием нескольких операторов '?'.
    | Для читаемости – оформляйте код в несколько строк.
    | var message;
    | if (login == 'Вася') {
    |   message = 'Привет';
    | } else if (login == 'Директор') {
    |   message = 'Здравствуйте';
    | } else if (login == '') {
    |   message = 'Нет логина';
    | } else {
    |   message = '';
    | }
  p: button(onclick='ternaryTransform ("rr")') запуск
  p: b Основы JavaScript.Логические операторы
  p 1.Напишите условие if для проверки того факта, что переменная age находится между 14 и 90 включительно.s
    | «Включительно» означает, что концы промежутка включены, то есть age может быть равна 14 или 90.
  p: button(onclick='alert(ageIsOk)') запуск
  p 2. Напишите условие if для проверки того факта, что age НЕ находится между 14 и 90 включительно.
    | Сделайте два варианта условия: первый с использованием оператора НЕ !, второй – без этого оператораp: b Основы JavaScript. Циклы while, for
  p: button(onclick='alert(ageIsOk2)') запуск
  p 1.При помощи цикла for выведите чётные числа от 2 до 10.
  p: button(onclick='showEqual()') запуск
  p 2.Перепишите код, заменив цикл for на while, без изменения поведения цикла.
    |  for (var i = 0; i < 3; i++) {
    |   alert( "номер " + i + "!" );
    | }
  p: button(onclick='forToWhile()') запуск
  p 3. Напишите цикл, который предлагает prompt ввести число, большее 100. Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.
    | Цикл должен спрашивать число пока либо посетитель не введёт число, большее 100, либо не нажмёт кнопку Cancel (ESC).
    | Предполагается, что посетитель вводит только числа. Предусматривать обработку нечисловых строк в этой задаче необязательно.
    | ДАЛОСЬ С ТРУДОМ
  p: button(onclick='isMoreThen100()') запуск
  p Натуральное число, большее 1, называется простым, если оно ни на что не делится, кроме себя и 1.
    | Другими словами, n>1 – простое, если при делении на любое число от 2 до n-1 есть остаток.
    | Создайте код, который выводит все простые числа из интервала от 2 до 10. Результат должен быть: 2,3,5,7.
    | P.S. Код также должен легко модифицироваться для любых других интервалов.
    | НЕ РЕШИЛА
  p: button(onclick='simpleNum()') запуск
  p: b Основы JavaScript.Конструкция switch
  p 1.Напишите if..else, соответствующий следующему switch:
    | switch (browser) {
    | case 'IE':
    | alert( 'О, да у вас IE!' );
    | break;
    | case 'Chrome':
    | case 'Firefox':
    | case 'Safari':
    | case 'Opera':
    | alert( 'Да, и эти браузеры мы поддерживаем' );
    | break;
    |  default:
    | alert( 'Мы надеемся, что и в вашем браузере все ок!' );
    | }
  p: button(onclick='switchToIf()') запуск
  p 2.Перепишите код с использованием одной конструкции switch:
    | var a = +prompt('a?', '');
    | if (a == 0) {
    |   alert( 0 );
    | }
    | if (a == 1) {
    |   alert( 1 );
    | }
    | if (a == 2 || a == 3) {
    |   alert( '2,3' );
    | }
  p: button(onclick='forToSwitch()') запуск
  p: b Основы JavaScript.Функции
  p 1.Следующая функция возвращает true, если параметр age больше 18. В ином случае она задаёт вопрос confirm и возвращает его результат.
    | function checkAge(age) {
    |   if (age > 18) {
    |     return true;
    |   } else {
    |     return confirm('Родители разрешили?');
    |   }
    | }
    | Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку. Сделайте два варианта функции checkAge:
    | Используя оператор '?'
    | Используя оператор ||
  p: button(onclick='checkAge(17)') запуск
  p 2.Задача «Hello World» для функций :)
    | Напишите функцию min(a,b), которая возвращает меньшее из чисел a,b.
    | Пример вызовов:
    | min(2, 5) == 2
    | min(3, -1) == -1
    | min(1, 1) == 1
  p: button(onclick='whichIsLess(8,3)') запуск
  p 3.Напишите функцию pow(x,n), которая возвращает x в степени n. Иначе говоря, умножает x на себя n раз и возвращает результат.
    | pow(3, 2) = 3 * 3 = 9
    | pow(3, 3) = 3 * 3 * 3 = 27
    | pow(1, 100) = 1 * 1 * ...*1 = 1
    | Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).
  p: button(onclick='') запуск
  p 4. P.S. В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.
  p: b Основы JavaScript.Рекурсия, стек
  p 1.Напишите функцию sumTo(n), которая для данного n вычисляет сумму чисел от 1 до n, например:
    | sumTo(1) = 1
    | sumTo(2) = 2 + 1 = 3
    | sumTo(3) = 3 + 2 + 1 = 6
    | sumTo(4) = 4 + 3 + 2 + 1 = 10
    | ...
    | sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
    | Сделайте три варианта решения:
    | С использованием цикла.
    | Через рекурсию, т.к. sumTo(n) = n + sumTo(n-1) для n > 1.
    | С использованием формулы для суммы арифметической прогрессии.
    | Пример работы вашей функции:
    | function sumTo(n) { /*... ваш код ... */ }
    | alert( sumTo(100) ); // 5050
    | Какой вариант решения самый быстрый? Самый медленный? Почему?
    | Можно ли при помощи рекурсии посчитать sumTo(100000)? Если нет, то почему?
  p: button(onclick='') запуск
  p 3. Последовательность чисел Фибоначчи имеет формулу Fn = Fn-1 + Fn-2. То есть, следующее число получается как сумма двух предыдущих.
    | Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....
    | Числа Фибоначчи тесно связаны с золотым сечением и множеством природных явлений вокруг нас.
    | Напишите функцию fib(n), которая возвращает n-е число Фибоначчи. Пример работы:
    | function fib(n) { /* ваш код */ }
    | alert( fib(3) ); // 2
    | alert( fib(7) ); // 13
    | alert( fib(77)); // 5527939700884757
    | Все запуски функций из примера выше должны срабатывать быстро.
  p: button(onclick='') запуск

  include learnjsbasic-content.html