extends ../layout/template

block variables
  - var pageClass = 'page__learnjsstructire'
  - var PageTitle = "Learn JavaScript.Структура"
  - var PageID = 'learnjsstructire'


block content
  p: b Числа
  p Создайте страницу, которая предлагает ввести два числа и выводит их сумму.
    | P.S. Есть «подводный камень» при работе с типами.
  p: button(onclick='alert( sum() )') запуск
  p Получится глупо, если при заказе двух товаров
    | с ценами 0.10$ и 0.20$ человек получит общую стоимость 0.30000000000000004$;
    | alert( 0.1 + 0.2 + '$' );
    | Что можно сделать, чтобы избежать проблем с ошибками округления?
  p: button(onclick='alert( mnojItem() )') запуск
  p Напишите код для генерации случайного значения в диапазоне от 0 до max, не включая max.
  p: button(onclick='alert( random(10) )') запуск
  p Напишите код для генерации случайного числа от min до max, не включая max.
  p: button(onclick='alert( randomBetween(8,19) )') запуск
  p Напишите функцию randomInteger(min, max) для генерации случайного целого числа между min и max, включая min,max как возможные значения.
    | Любое число из интервала min..max должно иметь одинаковую вероятность.
  p: button(onclick='alert( randomInteger(1,10) )') запуск
  p: b Строки
  p Напишите функцию ucFirst(str), которая возвращает строку str с заглавным первым символом, например:
    | ucFirst("вася") == "Вася";
    | ucFirst("") == ""; // нет ошибок при пустой строке
    | P.S. В JavaScript нет встроенного метода для этого. Создайте функцию, используя toUpperCase() и charAt().
  p: button(onclick='alert(ucFirst("вася"))') запуск
  p Напишите функцию checkSpam(str), которая возвращает true, если строка str содержит „viagra“ или „XXX“, а иначе false.
    | Функция должна быть нечувствительна к регистру:
    |
    | checkSpam('buy ViAgRA now') == true
    | checkSpam('free xxxxx') == true
    | checkSpam("innocent rabbit") == false
  p: button(onclick='alert( checkSpam("XXX") )') запуск
  p Создайте функцию truncate(str, maxlength), которая проверяет длину строки str, и если она превосходит maxlength – заменяет конец str на "...", так чтобы ее длина стала равна maxlength.

    | Результатом функции должна быть (при необходимости) усечённая строка.
    |
    | Например:
    |
    |   truncate("Вот, что мне хотелось бы сказать на эту тему:", 20) = "Вот, что мне хоте..."
    |
    |   truncate("Всем привет!", 20) = "Всем привет!"
    |   Эта функция имеет применение в жизни. Она используется, чтобы усекать слишком длинные темы сообщений.
    |
    |   P.S. В кодировке Unicode существует специальный символ «троеточие»: … (HTML: &hellip;), но в этой задаче подразумеваются именно три точки подряд.
  p: button(onclick='alert( truncate("Вот, что мне хотелось бы сказать на эту тему", 20) )') запуск
  p Есть стоимость в виде строки: "$120". То есть, первым идёт знак валюты, а затем – число.
    | Создайте функцию extractCurrencyValue(str), которая будет из такой строки выделять число-значение, в данном случае 120.
    |
  //p: button(onclick='') запуск
  p: b Объекты как ассоциативные массивы
  p Мини-задача на синтаксис объектов. Напишите код, по строке на каждое действие.
    | Создайте пустой объект user.
    | Добавьте свойство name со значением Вася.
    | Добавьте свойство surname со значением Петров.
    | Поменяйте значение name на Сергей.
    | Удалите свойство name из объекта.
  p: button(onclick='objectCreate()') запуск
  p:b Объекты: перебор свойств
  p Создайте функцию isEmpty(obj), которая возвращает true, если в объекте нет свойств и false – если хоть одно свойство есть.
    | Работать должно так:
    |
    | function isEmpty(obj) {
    | /* ваш код */
    | }
    |
    | var schedule = {};
    |
    | alert( isEmpty(schedule) ); // true
    |
    | schedule["8:30"] = "подъём";
    |
    | alert( isEmpty(schedule) ); // false
  p: button(onclick='alert( isEmpty(schedule) );') запуск
  p Есть объект salaries с зарплатами. Напишите код, который выведет сумму всех зарплат.

    | Если объект пустой, то результат должен быть 0.
    |
    | Например:
    |
    |   "use strict";
    |
    |   var salaries = {
    |   "Вася": 100,
    |   "Петя": 300,
    |   "Даша": 250
    |   };
    |
    |   //... ваш код выведет 650
  p: button(onclick='alert( sumSalaries(salaries) )') запуск
  p Есть объект salaries с зарплатами. Напишите код, который выведет имя сотрудника, у которого самая большая зарплата.

    | Если объект пустой, то пусть он выводит «нет сотрудников».
    |
    | Например:
    |
    |   "use strict";
    |
    |   var salaries = {
    |   "Вася": 100,
    |   "Петя": 300,
    |   "Даша": 250
    |   };
    |
    |   // ... ваш код выведет "Петя"
  p: button(onclick='alert( whoIsRich(salaries) )') запуск
  p Создайте функцию multiplyNumeric, которая получает объект и умножает все численные свойства на 2. Например:

    |   // до вызова
    |   var menu = {
    |     width: 200,
    | height: 300,
    | title: "My menu"
    | };
    |
    | multiplyNumeric(menu);
    |
    | // после вызова
    | menu = {
    | width: 400,
    | height: 600,
    | title: "My menu"
    | };
    | P.S. Для проверки на число используйте функцию:
    |
    | function isNumeric(n) {
    |   return !isNaN(parseFloat(n)) && isFinite(n)
    | }
  p: button(onclick=' multiplyNumeric(menu)') запуск
  p: b Массивы с числовыми индексами
  p Как получить последний элемент из произвольного массива?
    |
    | У нас есть массив goods. Сколько в нем элементов – не знаем, но можем прочитать из goods.length.
    |
    | Напишите код для получения последнего элемента goods.
  p: button(onclick='getLastFruit()') запуск
  p Как добавить элемент в конец произвольного массива?
    | У нас есть массив goods. Напишите код для добавления в его конец значения «Компьютер».
  p: button(onclick='pushToArray()') запуск
  p Задача из 5 шагов-строк:
    | Создайте массив styles с элементами «Джаз», «Блюз».
    | Добавьте в конец значение «Рок-н-Ролл»
    | Замените предпоследнее значение с конца на «Классика». Код замены предпоследнего значения должен работать для массивов любой длины.
    | Удалите первое значение массива и выведите его alert.
    | Добавьте в начало значения «Рэп» и «Регги».
    | Массив в результате каждого шага:
    |
    | Джаз, Блюз
    | Джаз, Блюз, Рок-н-Ролл
    | Джаз, Классика, Рок-н-Ролл
    | Классика, Рок-н-Ролл
    | Рэп, Регги, Классика, Рок-н-Ролл
  p: button(onclick='unshiftArray()') запуск
  p  Напишите код для вывода alert случайного значения из массива:
    |
    | var arr = ["Яблоко", "Апельсин", "Груша", "Лимон"];
    | P.S. Код для генерации случайного целого от min to max включительно:
    |
    | var rand = min + Math.floor(Math.random() * (max + 1 - min));
  p: button(onclick='alertRandom()') запуск
  p Напишите код, который:
    | Запрашивает по очереди значения при помощи prompt и сохраняет их в массиве.
    | Заканчивает ввод, как только посетитель введёт пустую строку, не число или нажмёт «Отмена».
    | При этом ноль 0 не должен заканчивать ввод, это разрешённое число.
    | Выводит сумму всех значений массива
  p: button(onclick='createElements()') запуск
  p Создайте функцию find(arr, value), которая ищет в массиве arr значение value и возвращает его номер, если найдено, или -1, если не найдено.

    | Например:
    |
    |   arr = ["test", 2, 1.5, false];
    |
    |   find(arr, "test"); // 0
    |   find(arr, 2); // 1
    |   find(arr, 1.5); // 2
    |
    |   find(arr, 0); // -1
  //p: button(onclick='') запуск
  p Создайте функцию filterRange(arr, a, b), которая принимает массив чисел arr и возвращает новый массив, который содержит только числа из arr из диапазона от a до b. То есть, проверка имеет вид a ≤ arr[i] ≤ b. Функция не должна менять arr.
    |
    | Пример работы:
    |
    | var arr = [5, 4, 3, 8, 0];
    |
    | var filtered = filterRange(arr, 3, 5);
    | // теперь filtered = [5, 4, 3]
    | // arr не изменился
  //p: button(onclick='') запуск
  p Целое число, большее 1, называется простым, если оно не делится нацело ни на какое другое, кроме себя и 1.
    | Древний алгоритм «Решето Эратосфена» для поиска всех простых чисел до n выглядит так:
    |
    | Создать список последовательных чисел от 2 до n: 2, 3, 4, ..., n.
    | Пусть p=2, это первое простое число.
    | Зачеркнуть все последующие числа в списке с разницей в p, т.е. 2*p, 3*p, 4*p и т.д. В случае p=2 это будут 4,6,8....
    | Поменять значение p на первое не зачеркнутое число после p.
    | Повторить шаги 3-4 пока p2 < n.
    | Все оставшиеся не зачеркнутыми числа – простые.
    | Посмотрите также анимацию алгоритма.
    |
    | Реализуйте «Решето Эратосфена» в JavaScript, используя массив.
    |
    | Найдите все простые числа до 100 и выведите их сумму.
  //p: button(onclick='') запуск
  p На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].

    | Задача – найти непрерывный подмассив arr, сумма элементов которого максимальна.
    |
    | Ваша функция должна возвращать только эту сумму.
    |
    | Например:
    |
    |   getMaxSubSum([-1, 2, 3, -9]) = 5 (сумма выделенных)
    |   getMaxSubSum([2, -1, 2, 3, -9]) = 6
    |   getMaxSubSum([-1, 2, 3, -9, 11]) = 11
    |   getMaxSubSum([-2, -1, 1, 2]) = 3
    |   getMaxSubSum([100, -9, 2, -3, 5]) = 100
    |   getMaxSubSum([1, 2, 3]) = 6 (неотрицательные - берем всех)
    |   Если все элементы отрицательные, то не берём ни одного элемента и считаем сумму равной нулю:
    |
    |   getMaxSubSum([-1, -2, -3]) = 0
    |   Постарайтесь придумать решение, которое работает за O(n2), а лучше за O(n) операций.
  //p: button(onclick='') запуск
  p: b Массивы: методы
  p В объекте есть свойство className, которое содержит список «классов» – слов, разделенных пробелом:
    |
    | var obj = {
    |   className: 'open menu'
    | }
    | Создайте функцию addClass(obj, cls), которая добавляет в список класс cls, но только если его там еще нет:
    |
    | addClass(obj, 'new'); // obj.className='open menu new'
    | addClass(obj, 'open'); // без изменений (класс уже существует)
    | addClass(obj, 'me'); // obj.className='open menu new me'
    |
    | alert( obj.className ); // "open menu new me"
    | P.S. Ваша функция не должна добавлять лишних пробелов.
  //p: button(onclick='') запуск
  p Напишите функцию camelize(str), которая преобразует строки вида «my-short-string» в «myShortString».
    |
    | То есть, дефисы удаляются, а все слова после них получают заглавную букву.
    |
    | Например:
    |
    |   camelize("background-color") == 'backgroundColor';
    |   camelize("list-style-image") == 'listStyleImage';
    |   camelize("-webkit-transition") == 'WebkitTransition';
    |   Такая функция полезна при работе с CSS.
    |
    |   P.S. Вам пригодятся методы строк charAt, split и toUpperCase.
  //p: button(onclick='') запуск
  p У объекта есть свойство className, которое хранит список «классов» – слов, разделенных пробелами:
    |
    |   var obj = {
    |     className: 'open menu'
    | };
    | Напишите функцию removeClass(obj, cls), которая удаляет класс cls, если он есть:
    |
    | removeClass(obj, 'open'); // obj.className='menu'
    | removeClass(obj, 'blabla'); // без изменений (нет такого класса)
    | P.S. Дополнительное усложнение. Функция должна корректно обрабатывать дублирование класса в строке:
    |
    | obj = {
    | className: 'my menu menu'
    | };
    | removeClass(obj, 'menu');
    | alert( obj.className ); // 'my'
    | Лишних пробелов после функции образовываться не должно.
  //p: button(onclick='') запуск
  p Создайте функцию filterRangeInPlace(arr, a, b), которая получает массив с числами arr и удаляет из него все числа вне диапазона a..b. То есть, проверка имеет вид a ≤ arr[i] ≤ b. Функция должна менять сам массив и ничего не возвращать.
    |     |апример:
    |  arr = [5, 3, 8, 1];
    |  filterRangeInPlace(arr, 1, 4); // удалены числа вне диапазона 1..4
    |  alert( arr ); // массив изменился: остались [3, 1]
  //p: button(onclick='') запуск
  p Как отсортировать массив чисел в обратном порядке?
    | var arr = [5, 2, 1, -10, 8];
    | // отсортируйте?
    | alert( arr ); // 8, 5, 2, 1, -10
  //p: button(onclick='') запуск
  p Есть массив строк arr. Создайте массив arrSorted – из тех же элементов, но отсортированный.
    |
    | Исходный массив не должен меняться.
    |
    | var arr = ["HTML", "JavaScript", "CSS"];
    |
    | // ... ваш код ...
    |
    | alert( arrSorted ); // CSS, HTML, JavaScript
    | alert( arr ); // HTML, JavaScript, CSS (без изменений)
    | Постарайтесь сделать код как можно короче.
  //p: button(onclick='') запуск
  p  Используйте функцию sort для того, чтобы «перетрясти» элементы массива в случайном порядке.
    |
    | var arr = [1, 2, 3, 4, 5];
    |
    | arr.sort(ваша функция);
    |
    | alert( arr ); // элементы в случайном порядке, например [3,5,1,2,4]
  //p: button(onclick='') запуск
  p Напишите код, который отсортирует массив объектов people по полю age.
    |
    | Например:
    |
    |   var vasya = { name: "Вася", age: 23 };
    |   var masha = { name: "Маша", age: 18 };
    |   var vovochka = { name: "Вовочка", age: 6 };
    |
    |   var people = [ vasya , masha , vovochka ];
    |
    |   ... ваш код ...
    |
    |   // теперь people: [vovochka, masha, vasya]
    |   alert(people[0].age) // 6
    |   Выведите список имён в массиве после сортировки.
  //p: button(onclick='') запуск
  p Односвязный список – это структура данных, которая состоит из элементов, каждый из которых хранит ссылку на следующий. Последний элемент может не иметь ссылки, либо она равна null.
  //p: button(onclick='') запуск
  p Анаграммы – слова, состоящие из одинакового количества одинаковых букв, но в разном порядке. Например:
    | воз - зов
    | киборг - гробик
    | корсет - костер - сектор
    | Напишите функцию aclean(arr), которая возвращает массив слов, очищенный от анаграмм.
    | Например:
    |   var arr = ["воз", "киборг", "корсет", "ЗОВ", "гробик", "костер", "сектор"];
    |
    |   alert( aclean(arr) ); // "воз,киборг,корсет" или "ЗОВ,гробик,сектор"
    |   Из каждой группы анаграмм должно остаться только одно слово, не важно какое.
  //p: button(onclick='') запуск
  p Пусть arr – массив строк.

    | Напишите функцию unique(arr), которая возвращает массив, содержащий только уникальные элементы arr.
    |
    | Например:
    |
    |   function unique(arr) {
    |   /* ваш код */
    |   }
    |
    |   var strings = ["кришна", "кришна", "харе", "харе",
    |   "харе", "харе", "кришна", "кришна", "8-()"
    |   ];
    |
    |   alert( unique(strings) ); // кришна, харе, 8-()
  //p: button(onclick='') запуск
  p: b Массив: перебирающие методы
  p Код ниже получает из массива строк новый массив, содержащий их длины:
    |  var arr = ["Есть", "жизнь", "на", "Марсе"];

    |  var arrLength = [];
    |  for (var i = 0; i < arr.length; i++) {
    |    arrLength[i] = arr[i].length;
    |

    | lert( arrLength ); // 4,5,2,5
    | ерепишите выделенный участок: уберите цикл, используйте вместо него метод map.
  p: button(onclick='forToMap()') запуск
  p На входе массив чисел, например: arr = [1,2,3,4,5].
    |
    | Напишите функцию getSums(arr), которая возвращает массив его частичных сумм.
    |
    | Иначе говоря, вызов getSums(arr) должен возвращать новый массив из такого же числа элементов, в котором на каждой позиции должна быть сумма элементов arr до этой позиции включительно.
    |
    | То есть:
    |
    | для arr = [ 1, 2, 3, 4, 5 ]
    | getSums( arr ) = [ 1, 1+2, 1+2+3, 1+2+3+4, 1+2+3+4+5 ] = [ 1, 3, 6, 10, 15 ]
    | Еще пример: getSums([-2,-1,0,1]) = [-2,-3,-3,-2].
    |
    | Функция не должна модифицировать входной массив.
    | В решении используйте метод arr.reduce.
  p: button(onclick='getMnoj(nmbs)') запуск
  p: b Задачи от Ильи
  p проверка числа - дает ли сумма любых двух числел в массиве это число.
    |   p: button(onclick='alert (checkNumber(b,a) )') запуск
  p проверка входящего параметра - является ли это частью объекта/ массива.
    p: button(onclick='alert (checkParam(c,d) )') запуск
  p GET fetch запрос пользователя на данные
  p: button(onclick='getUser()') запуск
  p POST fetch запрос на занесение данных
  p: button(onclick='getUser2()') запуск запуск
  p GET axios запрос пользователя на данные
  p: button(onclick='getAxios()') запуск
  p POST axios запрос пользователя на данные
  p: button(onclick='postAxios()') запуск
  p GET async fetch запрос пользователя на данные
  p: button(onclick='fetchAcyncResult()') запуск
  p GET fetch запрос погоды
    p: button(onclick='getWeather()') запуск
  p: b Псевдомассив аргументов "arguments"
  p function f(x) {
    |     // ..ваш код..
    |     // выведите 1, если первый аргумент есть, и 0 - если нет
    | }
    |
    | f(undefined); // 1
    | f(); // 0
  p: button(onclick='alert( argmnts(undefined) )') запуск
  p Напишите функцию sum(...), которая возвращает сумму всех своих аргументов:
    | sum() = 0
    | sum(1) = 1
    | sum(1, 2) = 3
    | sum(1, 2, 3) = 6
    | sum(1, 2, 3, 4) = 10
  p: button(onclick='alert( argumentsSum(1,5,6,7) )') запуск
  p: b Дата и время
  p Создайте объект Date для даты: 20 февраля 2012 года, 3 часа 12 минут.
   | Временная зона – местная. Выведите его на экран
  //p: button(onclick='alert(  )') запуск
  p Создайте функцию getWeekDay(date), которая выводит текущий день недели в коротком формате „пн“, „вт“, … „вс“.
    |
    | Например:
    |   var date = new Date(2012,0,3);  // 3 января 2012
    |   alert( getWeekDay(date) );      // Должно вывести 'вт
  //p: button(onclick='alert(  )') запуск
  p Напишите функцию, getLocalDay(date) которая возвращает день недели для даты date.
    | День нужно возвратить в европейской нумерации, т.е. понедельник имеет номер 1, вторник номер 2, …, воскресенье – номер 7.
    | var date = new Date(2012, 0, 3);  // 3 янв 2012
    | alert( getLocalDay(date) );       // вторник, выведет 2
  //p: button(onclick='alert(  )') запуск
  p Создайте функцию getDateAgo(date, days), которая возвращает число, которое было days дней назад от даты date.
    | Например, для 2 января 2015:
    | var date = new Date(2015, 0, 2);
    | alert( getDateAgo(date, 1) ); // 1, (1 января 2015)
    | alert( getDateAgo(date, 2) ); // 31, (31 декабря 2014)
    | alert( getDateAgo(date, 365) ); // 2, (2 января 2014)
    | P.S. Важная деталь: в процессе вычислений функция не должна менять переданный ей объект date.
  //p: button(onclick='alert(  )') запуск
  p Напишите функцию getLastDayOfMonth(year, month), которая возвращает последний день месяца.
    |
    | Параметры:
    |   year – 4-значный год, например 2012.
    |   month – месяц от 0 до 11.
    |   Например, getLastDayOfMonth(2012, 1) = 29 (високосный год, февраль).
  //p: button(onclick='alert(  )') запуск
  p Напишите функцию getSecondsToday() которая возвращает, сколько секунд прошло с начала сегодняшнего дня.
    |
    | Например, если сейчас 10:00 и не было перехода на зимнее/летнее время, то:
    | getSecondsToday() == 36000 // (3600 * 10)
    | Функция должна работать в любой день, т.е. в ней не должно быть конкретного значения сегодняшней даты.
  //p: button(onclick='alert(  )') запуск
  p Напишите функцию getSecondsToTomorrow() которая возвращает, сколько секунд осталось до завтра.
    | Например, если сейчас 23:00, то:
    | getSecondsToTomorrow() == 3600
    | P.S. Функция должна работать в любой день, т.е. в ней не должно быть конкретного значения сегодняшней даты.
  //p: button(onclick='alert(  )') запуск
  p Напишите функцию formatDate(date), которая выводит дату date в формате дд.мм.гг:
    |
    | Например:
    |   var d = new Date(2014, 0, 30); // 30 января 2014
    |   alert( formatDate(d) ); // '30.01.14'
    |   P.S. Обратите внимание, ведущие нули должны присутствовать, то есть 1 января 2001 должно быть 01.01.01, а не 1.1.1.
  //p: button(onclick='alert(  )') запуск
  p Напишите функцию formatDate(date), которая форматирует дату date так:
    |
    | Если со времени date прошло менее секунды, то возвращает "только что".
    | Иначе если со времени date прошло менее минуты, то "n сек. назад".
    | Иначе если прошло меньше часа, то "m мин. назад".
    | Иначе полная дата в формате "дд.мм.гг чч:мм".
    | Например:
    |
    |   function formatDate(date) { /* ваш код */ }
    |
    |   alert( formatDate(new Date(new Date - 1)) ); // "только что"
    |
    |   alert( formatDate(new Date(new Date - 30 * 1000)) ); // "30 сек. назад"
    |
    |   alert( formatDate(new Date(new Date - 5 * 60 * 1000)) ); // "5 мин. назад"
    |
    |   alert( formatDate(new Date(new Date - 86400 * 1000)) ); // вчерашняя дата в формате "дд.мм.гг чч:мм"
  //p: button(onclick='alert(  )') запуск
